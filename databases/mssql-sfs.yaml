---
# https://mcr.microsoft.com/en-us/product/mssql/server/about
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mssql-sfs # 배포 이름
  labels:
    app: mssql # 배포 이름
spec:
  serviceName: mssql
  replicas: 2
  selector:
    matchLabels:
      app: mssql # 배포 이름
  template:
    metadata:
      labels:
        app: mssql # 배포 이름
    spec:
#      affinity:
#        nodeAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#            nodeSelectorTerms:
#            - matchExpressions:
#              - key: kubernetes.io/hostname # worker03~06에만 raid가 설정되어있으므로 해당 노드으로 지정
#                operator: In
#                values:
#                - worker03
#                - worker04
#                - worker05
#                - worker06
#      volumes:
#        - name: data-volume # 볼륨명
#          persistentVolumeClaim:
#            claimName: mssql-pvc

      containers:
        - name: mssql  # 컨테이너 이름
          image: "mcr.microsoft.com/mssql/server:2019-latest" # 이미지명 
          imagePullPolicy: IfNotPresent
          env:
            - name: ACCEPT_EULA
              value: "Y"
  
            # 패스워드 보안을 위하여 Secret 객체를 활용
            # 쿠버네티스에서의 패스워드(Secret) 생성 명령어
            # kubectl create secret generic database-secret -n dev --from-literal=root-password=$(echo '비밀번호' | base64)
            - name: MSSQL_SA_PASSWORD # 패스워드 보안을 위하여 Secret 객체를 활용
              valueFrom:
                secretKeyRef: # secret 리소스인 database-secret에 저장된 root-password의 값을 불러옴
                  name: database-secret
                  key: root-password

          ports: # 컨테이너 내부에서 사용하는 포트 명시
              - name: db-port
                containerPort: 1433
                protocol: TCP
          volumeMounts: # 영구 저장할 볼륨 (디렉토리) 설정
            - name: data-volume # 위에서 명시한 볼륨명 지정
              mountPath: /var/opt/mssql 
            # - name: config-file # 설정이 필요한 경우
            #   mountPath: /etc/mysql/conf.d # 실제로 사용시 configmap 으로 만들어서 mount할 것

  volumeClaimTemplates: # statefulset 은 독립적인 저장공간을 갖는다고 생각하고 각각의 pod에 pv 를 생성함
  - metadata:
      name: data-volume 
    spec: 
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "nfs"
      resources: 
        requests: 
          storage: 10Gi
      
---
apiVersion: v1
kind: Service
metadata:
  name: mssql-service # 서비스 이름
  annotations:
   metallb.universe.tf/address-pool: "internal-cloud-pool" 
#    metallb.universe.tf/loadBalancerIPs: "172.17.250.101"
#    metallb.universe.tf/allow-shared-ip: "key-to-share-172.17.250.101"
spec:
  selector:
    #app: mssql # 연결할 Deployment의 이름
    statefulset.kubernetes.io/pod-name: "mssql-sfs-0"
  type: LoadBalancer # 서비스 유형 LoadBalancer는 172.17.250.100 ~ 172.17.250.150 중에서 자동 할당하도록 설정되어있음
  ports:
  - name: service-port
    port: 1433 # Pod 내부에서 사용하는 포트. 실제 할당된 아이피는 $(kubectl get service -n dev) 로 조회
    protocol: TCP
  #externalIPs: # 필요한 경우 아이피 지정 가능 (단, 로드밸런서의 아이피 설정 범위에 한해서)
  #  - 172.17.250.101i
  loadBalancerIP: 172.17.250.114


---
apiVersion: v1
kind: Service
metadata:
  name: mssql-service-1
  annotations:
    metallb.universe.tf/address-pool: "internal-cloud-pool"
spec:
  selector:
    statefulset.kubernetes.io/pod-name: "mssql-sfs-1"
  type: LoadBalancer
  ports:
  - name: service-port
    port: 1433
    protocol: TCP
  loadBalancerIP: 172.17.250.115
